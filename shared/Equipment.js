/**
 * Created by Jerome on 12-12-17.
 */

var onServer = (typeof window === 'undefined');

/*
* Weapon, protection, ...
* Boots -> fatigue
* Backpack -> inventory size
* Belt -> quick-inventory size
* Firearms: bullets+powder
* Later: specific slots for specific items
* */

var Equipment = {
    slots: {
        meleew:{
            nb: 1,
            x: 100,
            y: 115,
            battlex: 10,
            battley: 10,
            shade: 'sword',
            name: 'Melee weapon New',
            desc: 'Weapon used to fight opponents on adjacent battle positions. Influences the Melee damage stat. Not compatible with a ranged weapon.',
            //conflict: 'rangedw',
            showInBattle: true,
            defaultItem: 48
        },
        rangedw:{
            nb: 1,
            x: 100,
            y: 65,
            battlex: 10,
            battley: 50,
            shade: 'gun',
            name: 'Ranged weapon',
            desc: 'Weapon used to fight opponents on non-adjacent battle positions. Not compatible with a melee weapon. Influences the Accuracy stat. Bows tend to be more accurate than guns, but arrows tend to deal less damage than bullets.',
            //conflict: 'meleew',
            showInBattle: true,
            defaultItem: 49
        },
        armor:{
            nb: 1,
            x: 150,
            y: 50,
            shade: 'armor',
            name: 'Armor',
            desc: 'Main defensive equipment, decreases both melee and ranged damage from opponents. Influences the Defense stat.'
        },
        belt:{
            nb: 1,
            x: 150,
            y: 100,
            shade: 'belt',
            name: 'Belt',
            desc: 'In the future, will have an impact on the amount of consumable items usable in battle.'
        },
        boots:{
            nb: 1,
            x: 150,
            y: 150,
            shade: 'boots',
            name: 'Boots',
            desc: 'In the future, will have an impact on the fatigue generated by walking.'
        },
        range_container:{
            nb: 1,
            x: 270,
            y: 50,
            battlex: 60,
            battley: 10,
            shade: 'quiver',
            name: 'Ammo Container',
            desc: 'Container for arrows, bullets, etx. Containers can have different capacities.'
        },
        range_ammo:{
            nb: 1,
            x: 310,
            y: 50,
            battlex: 100,
            battley: 10,
            shade: 'arrow',
            name: 'Ammo',
            desc: 'Ammunition.'
        }
    },
    // containers: {
    //     quiver:{
    //         nb: 1,
    //         x: 270,
    //         y: 50,
    //         battlex: 60,
    //         battley: 10,
    //         shade: 'quiver',
    //         name: 'Quiver',
    //         desc: 'Container for arrows, to be used with a bow. Quivers can have different capacities.',
    //         contains: 'arrows',
    //         showInBattle: true
    //     },
    //     ammo_pouch:{
    //         nb: 1,
    //         x: 270,
    //         y: 100,
    //         battlex: 60,
    //         battley: 50,
    //         shade: 'ammo-pouch',
    //         name: 'Bullets pouch',
    //         desc: 'Container for bullets, to be used with a gun. Pouches can have different capacities.',
    //         contains: 'bullets',
    //         showInBattle: true
    //     }
    // },
    // ammo: {
    //     arrows:{
    //         nb: 1,
    //         x: 310,
    //         y: 50,
    //         battlex: 100,
    //         battley: 10,
    //         shade: 'arrow',
    //         name: 'Arrows',
    //         desc: 'Ammunition type used by bows. Only one type of arrow can be equipped at any given time. If the number of arrows is yellow, it means that the quiver is full.',
    //         container: 'quiver',
    //         showInBattle: true
    //     },
    //     bullets:{
    //         nb: 1,
    //         x: 310,
    //         y: 100,
    //         battlex: 100,
    //         battley: 50,
    //         shade: 'bullets',
    //         name: 'Bullets',
    //         desc: 'Ammunition type used by guns. Only one type of bullets can be equipped at any given time. If the number of bullets is yellow, it means that the pouch is full.',
    //         container: 'ammo_pouch',
    //         showInBattle: true
    //     }
    // },

    getData: function(slot){
        if(slot in Equipment.slots) return Equipment.slots[slot];
        // if(slot in Equipment.containers) return Equipment.containers[slot];
        // if(slot in Equipment.ammo) return Equipment.ammo[slot];
    }
};

function EquipmentManager(){

    this.slots = {};
    // this.containers = {};
    // this.container = {};
    // this.ammo = {};
    // TODO: Check Maybe wont be needed
    // this.quickslots = {
    //     slots: [],
    //     nb: 2
    // };

    for(var slotName in Equipment.slots){
        //TODO: Maybe here is better place for default items ? - ideal place :)
        // Replace with permanent equipment
        item = {
            id: -1,
            nb: 0
        }
        console.log('EquipmentManager slot zzzz', slotName);
        if (Equipment.slots[slotName].defaultItem){
            console.log('equip default item bby default', Equipment.slots[slotName].defaultItem)
            item.id = Equipment.slots[slotName].defaultItem;
        }
        this.slots[slotName] = item;
    }

    // this.container = Equipment.slots.range_container;
    // this.ammo = Equipment.slots.range_ammo;

    // for(var container in Equipment.containers){
    //     var data = Equipment.containers[container];
    //     this.containers[container] = {
    //         id: -1,
    //         contains: data.contains
    //     };
    // }
    // for(var ammo in Equipment.ammo){
    //     var data = Equipment.ammo[ammo];
    //     this.ammo[ammo] = {
    //         id: -1,
    //         nb: 0,
    //         container: data.container // string label of container slot
    //     };
    // }
}

// Returns the ID of the item equipped at the given slot
EquipmentManager.prototype.get = function(slotName){
    if(slotName in this.slots) {
        return this.slots[slotName].id;
    }
    // if(label in this.containers) return this.containers[label].id;
    // if(label in this.ammo) return this.ammo[label].id;
    return -1;
};

// // Returns the *label* of the ammo contained in a given container
// EquipmentManager.prototype.getAmmoType = function(container){
//     return this.containers[container].contains;
// };
//
// Returns the *label* of the container for a giver ammo type
EquipmentManager.prototype.getNbAmmo = function(){
    return this.slots["range_ammo"].nb;
};

EquipmentManager.prototype.hasAnyAmmo = function(){
    return this.slots["range_ammo"].id > -1 && this.slots["range_ammo"].nb > 0;
};

EquipmentManager.prototype.load = function(nb){
    // TODO: check if more ammo is loaded than the capacity its
    //  calculated right and returned to the inventory
    this.slots["range_ammo"].nb += nb;
};

EquipmentManager.prototype.set = function(slotName,id){
    console.log('EquipmentManager.prototype.set', slotName, id);
    if(slotName in this.slots) this.slots[slotName].id = id;
    // if(label in this.containers) this.containers[label].id = id;
    // if(label in this.ammo) this.ammo[label].id = id;
};

EquipmentManager.prototype.setAmmo = function(nb){
    this.slots['range_ammo'].nb = nb
};

EquipmentManager.prototype.listItems = function(){
    var items = [];
    for(var slotName in this.slots){
        if(this.slots[slotName] > -1) items.push(this.slots[slotName]);
    }
    // for(var label in this.containers){
    //     if(this.container > -1) items.push(this.container);
    // }
    // for(var label in this.ammo){
    //     if(this.ammo.id > -1) items.push(this.ammo);
    // }
    return items;
};

// re-enable equip from db

if (onServer){
    module.exports.Equipment = Equipment;
    module.exports.EquipmentManager = EquipmentManager;
}
